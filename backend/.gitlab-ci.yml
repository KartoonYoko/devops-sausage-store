include: 
  - template: Security/SAST.gitlab-ci.yml

stages:
  - build
  - test
  - release
  - deploy
  - notify

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  NEXUS_REPO_ARTIFACT_URL_BACK: https://nexus.k8s.praktikum-services.tech/repository/sausage-store-vtulkin-vladislav-backend/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

build-backend-code-job:
  stage: build
  script:
    - cd backend
    - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH}
  artifacts:
    paths:
      - backend/target/sausage-store-$VERSION.jar
      - ${CI_PROJECT_DIR}/.m2
  cache:
    paths:
      - $MAVEN_REPO_PATH

upload-backend-release:
  stage: release
  only:
    changes:
      - backend/**/*
  needs:
    - job: build-backend-code-job
      optional: true
  script:
    - cd backend
    - mvn -Dmaven.repo.local=$MAVEN_REPO_PATH -s settings.xml -Dversion.application=$VERSION -DskipTests deploy 

telegram-notification-backend:
  stage: notify
  only:
    variables:
    - $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - curl -X POST -H 'Content-type:application/json' --data "{\"chat_id\":\"-1001657575944\", \"text\":\"Вышла новая версия бекенда сосисочной — ${VERSION}. Скачать бекенд можно по ссылке — ${NEXUS_REPO_ARTIFACT_URL_BACK}\"}" https://api.telegram.org/bot$TELEGRAM_NOTIFICATION_TOKEN/sendMessage
  needs:
    - job: upload-backend-release
      optional: true

spotbugs-sast:
  needs:
    - job: build-backend-code-job
      optional: true
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

sonarqube-backend-sast:
  stage: test
  needs:
    - job: build-backend-code-job
      artifacts: true
      optional: true
  image: maven:3.8-openjdk-16 # тот самый docker-образ, о котором мы все узнаем в будущем
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true 
      -Dsonar.projectName="${SONAR_PROJECT_KEY_BACKEND}"
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND} 
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_BACKEND}

deploy:
  stage: deploy
  rules:
    - when: manual
  needs:
    - job: upload-backend-release
      optional: true
  before_script:
    #устанавливаем ssh-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    #сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
    - ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}"; export "VERSION=${VERSION}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_ARTIFACT_URL_BACK=${NEXUS_REPO_ARTIFACT_URL_BACK}"; export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s " < ./backend/deploy.sh 