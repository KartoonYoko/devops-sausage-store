include: 
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

stages:
  - build
  - test
  - release
  - deploy
  - notify

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  NEXUS_REPO_ARTIFACT_URL_BACK: https://nexus.k8s.praktikum-services.tech/repository/sausage-store-vtulkin-vladislav-backend/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку
  SAST_EXCLUDED_ANALYZERS: nodejs-scan, eslint, gosec-sast, semgrep

build-backend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
    - > 
      DOCKER_BUILDKIT=1 docker build 
      --target builder 
      --build-arg VERSION=$VERSION 
      --output ${MAVEN_REPO_PATH}
      .
  artifacts:
    paths:
      - ${MAVEN_REPO_PATH}
  # cache:
  #   paths:
  #     - ${MAVEN_REPO_PATH}

upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest

telegram-notification-backend:
  stage: notify
  only:
    variables:
    - $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - curl -X POST -H 'Content-type:application/json' --data "{\"chat_id\":\"-1001657575944\", \"text\":\"Вышла новая версия бекенда сосисочной — ${VERSION}. Скачать бекенд можно по ссылке — ${NEXUS_REPO_ARTIFACT_URL_BACK}\"}" https://api.telegram.org/bot$TELEGRAM_NOTIFICATION_TOKEN/sendMessage
  needs:
    - job: upload-backend-latest
      optional: true

spotbugs-sast:
  needs:
    - job: build-backend
      optional: true
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11

sonarqube-backend-sast:
  stage: test
  needs:
    - job: build-backend
      artifacts: true
      optional: true
  image: maven:3.8-openjdk-16 # тот самый docker-образ, о котором мы все узнаем в будущем
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true 
      -Dsonar.projectName="${SONAR_PROJECT_KEY_BACKEND}"
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND} 
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_BACKEND}

deploy-backend:
  stage: deploy
  # image: docker:20.10.12-dind
  image: vault:1.11.3
  rules:
    - when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./docker-compose.yml ${DEV_USER}@${DEV_HOST}:./docker-compose.yml
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "PSQL_DATASOURCE=$(vault kv get -field=spring.datasource.url secret/sausage-store)";
       export "PSQL_USER=$(vault kv get -field=spring.datasource.username secret/sausage-store)";
       export "PSQL_PASSWORD=$(vault kv get -field=spring.datasource.password secret/sausage-store)";
      /bin/bash -s " < ./backend/deploy.sh