include: 
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

stages:
  - build
  - test
  - release
  - deploy
  - notify

variables:
  SAST_EXCLUDED_ANALYZERS: nodejs-scan, eslint, spotbugs-sast, gosec-sast

build-backend-report:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend-report
    - >
      docker build
      --tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA

upload-backend-report-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend-report:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend-report:latest

telegram-notification-backend-report:
  stage: notify
  only:
    variables:
    - $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - curl -X POST -H 'Content-type:application/json' --data "{\"chat_id\":\"-1001657575944\", \"text\":\"Вышла новая версия бекенда отчётов сосисочной.\"}" https://api.telegram.org/bot$TELEGRAM_NOTIFICATION_TOKEN/sendMessage
  needs:
    - job: upload-backend-report-latest
      optional: true

sonarqube-backend-report-sast:
  stage: test
  needs:
    - job: build-backend-report
      artifacts: true
      optional: true
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd backend-report
    - >
      sonar-scanner
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND_REPORT}
      -Dsonar.projectName=${SONAR_PROJECT_KEY_BACKEND_REPORT}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_BACKEND_REPORT}

deploy-backend-report:
  stage: deploy
  # пробуем оставить vault для секретов
  image: vault:1.11.3
  rules:
    - when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # устанваливаем docker и docker compose
    - apk update
    - apk add docker openrc
    - apk --no-cache add curl
    - DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
    - mkdir -p $DOCKER_CONFIG/cli-plugins
    - curl -SL https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
    - chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
    # создаём контекст
    - docker context create remote --docker host=ssh://${DEV_USER}@${DEV_HOST}
    # выгружаем нужные секреты
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - export "DB=$(vault kv get -field=spring.data.mongodb.uri secret/sausage-store)"
    # запускаем
    - docker --context remote compose up backend-report -d --pull "always" --force-recreate